import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.swing.JOptionPane;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EntityUtils;

public class MfeMonitor {

	private final String monitorFile = "fmemonitor.txt";
	private final int timer_S = 10;
	private final String ip = "127.0.0.1";
	private final short port = 6666;
	private Lock filelock = new ReentrantLock();

	private String name;
	private String passwd;

	private static MfeMonitor mfeMonitor = null;

	Timer timer;

	class RemindTask extends TimerTask {
		public void run() {
			System.out.println("Time's up! Start to Send data");
			SendMsg();
			System.out.println("end of Sending data");
			// timer.cancel(); // Terminate the timer thread
		}
	}

	public static MfeMonitor getMonitor() {
		if (MfeMonitor.mfeMonitor == null) {
			MfeMonitor.mfeMonitor = new MfeMonitor();
		}
		return MfeMonitor.mfeMonitor;
	}

	public MfeMonitor() {

		Load();
		MarkStart();
		timer = new Timer();
		timer.schedule(new RemindTask(), 0, timer_S * 1000);
	}

	protected void finalize() {
		MarkEnd();
	}

	private boolean checkUser(String user, String passwd) {
		return true;
	}

	private File getFile() {
		return new File(System.getProperty("java.io.tmpdir"), this.monitorFile);
	}

	public void reBuild(String name, String passwd) {
		File tempFile = getFile();
		try {
			filelock.lock();
			tempFile.createNewFile();

			FileOutputStream out = new FileOutputStream(
					tempFile.getAbsolutePath());
			PrintStream p = new PrintStream(out);
			p.println(name);
			p.println(passwd);
			p.close();
			filelock.unlock();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			filelock.unlock();
		}

	}

	private void Load() {

		File tempFile = new File(System.getProperty("java.io.tmpdir"),
				this.monitorFile);
		System.out.println(tempFile.getAbsolutePath());
		try {
			if (!tempFile.exists()) {
				// not exist then create new File

				this.name = JOptionPane
						.showInputDialog("Please input your name  ^_^ !");
				this.passwd = JOptionPane
						.showInputDialog("Then give your Password ^_^!");

				reBuild(this.name, this.passwd);
			}

			BufferedReader br = new BufferedReader(new FileReader(tempFile));
			this.name = br.readLine();
			this.passwd = br.readLine();
			br.close();
			if (!checkUser(this.name, this.passwd)) {
				System.exit(0);
			}

			// then send the data
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void MarkStart() {
		println("start");
	}

	public void MarkEnd() {
		println("end");
	}

	public void MarkRun() {
		println("run");
	}

	public void MarkExport() {
		println("export");
	}

	private void println(String... lines) {
		File tempFile = new File(System.getProperty("java.io.tmpdir"),
				this.monitorFile);
		try {
			if (!tempFile.exists())
				return;
			filelock.lock();
			PrintStream p = new PrintStream(new FileOutputStream(
					tempFile.getAbsolutePath(), true));
			for (String line : lines) {
				p.append(System.currentTimeMillis() + " " + this.name + " "
						+ line + System.getProperty("line.separator"));
			}
			p.close();
			filelock.unlock();
		} catch (IOException e) {
			e.printStackTrace();
			filelock.unlock();
		}
	}
	public boolean SendLine(String line)
	{
		
	}
	public boolean SendAMsg(String name, String status, String time) {
		try {
			// TODO Auto-generated method stub
			String url = "http://127.0.0.1:8000/mfe/monitor/";
			// POST的URL
			HttpPost httppost = new HttpPost(url);
			// 建立HttpPost对象
			List<NameValuePair> params = new ArrayList<NameValuePair>();
			// 建立一个NameValuePair数组，用于存储欲传送的参数
			params.add(new BasicNameValuePair("name", name));
			params.add(new BasicNameValuePair("status", status));
			params.add(new BasicNameValuePair("time", time));
	
			// 添加参数
			httppost.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
			// 设置编码
			HttpResponse response = new DefaultHttpClient().execute(httppost);
			// 发送Post,并返回一个HttpResponse对象
			if (response.getStatusLine().getStatusCode() == 200) {// 如果状态码为200,就是正常返回
				return true;
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			return false;
		}
		return false;
		
	}

	public void SendMsg() {
		Socket socket = null;
		try {
			File tmpFile = getFile();
			if (!tmpFile.exists()) {
				return;
			}

			filelock.lock();
			BufferedReader br = new BufferedReader(new FileReader(tmpFile));
			String user = br.readLine();
			String passwd = br.readLine();
			String bufString = br.readLine();
			if (null == bufString) {
				filelock.unlock();
				return;
			}

			if(!SendLine(bufString)) return;
			
			while (null != (bufString = br.readLine())) {
				if(!SendLine(bufString)) return;
			}
			filelock.unlock();

			tmpFile.delete();// delete data already send
			reBuild(user, passwd);


		} catch (Exception exception) {
			filelock.unlock();
		} finally {
		}

	}
}
